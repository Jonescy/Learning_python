类和对象的概念：
类就是一个模板，模板里可以包含多个函数，函数里实现一些功能；
对象则是根据模板创建的实例，通过实例对象可以执行类中的函数。

对象和定义类：
使用class语句来创建一个新类，class 之后为类的名称并以冒号结尾；
实例化其他编程语言中一般用关键字new ，但是在python中并没有这个关键字，类的实例化类似函数调用方法

实例方法和属性：
在类的内部，使用def关键字可以定义一个实例方法，
定义在类里面， 方法外面的属性称为类属性，
定义在方法里面的使用self引用的属性称为实例属性

类属性和实例属性：
类属性：就是类对象所拥有的属性，它被所有类对象的实例对象共有，类独享和实例对象可以访问
实例属性：实例对象所拥有的属性，只能通过实例对象访问


在python中展现面向对象的三大特征
封装、继承、多态
封装：指的是吧内容封装到某个地方，便于后面的使用；
1.把内容封装到某个地方
2、从另外一个地方取调用被封装的内容
对于封装来说，其实就是使用初始化构造方法__init__将内容封装到对象中，
然后通过对象直接或通过self来获取被封装的内容

继承：子可以继承父的内容【属性和行为】
将多个类共有的方法提取到父类中，子类仅需要继承父类即可，而不必一一的实现，提升开发效率，减少代码重复编写

多态：所谓的多态就是，定义时的类型和运行时的类型不一样，此时就造成为多态。
通俗点就时，多种状态、多中形态，同一种行为，对于不同的子类【对象】，有不同的行为表现

注意：要想实现多态，必须遵守两个前提：1.存在继承关系；2.重写：子类重写父类的方法


鸭子类型（duck typing）
在程序设计中，鸭子类型（英语：duck typing）是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由当前的方法和属性的集合决定。‘鸭子测试’可以这样表述：
“当看到一直鸟走起来像鸭子，游泳起来像鸭子，叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”
在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。


类方法、实例方法、静态方法对比
1.类方法是第一个参数是类对象cls，通过cls引用的类对象的属性和方法 ，必须用装饰器@classmethod修饰
2.实例方法额第一个参数是实例对象self,通过self引用的可能是类属性，也有可能是实例属性（这个需要具体分析），不过在相同名称的类属性和实例属性的情况下，实例属性有限级更高。
3.静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类对象来引用。必须用装饰器@staticmethod来修饰

私有化属性和方法
两个下划线开头，什么鬼该属性为私有，不能被类的外部使用或直接访问

property属性
1、类属性即可在类中定义为property对象的类属性
2、装饰器@property ，在方法上加上装饰器

__new__()
__new__使用作用，创建并返回一个实例对象

单例模式
不管创建多少此对象，类只返回的对象都是初始创建的，不会新建其他对象

异常处理
try:
可能出现错误的代码块
except Exception as e：
出错后执行的代码块
else：
没有出错的代码块
finally：
无论是否发生错误，都会执行的代码块


Python 动态添加属性和方法
在程序运行的过程中添加属性和方法

__slots__ 变量
定义class 的时候，定义一个特殊的__slots__变量，限制该class实例能够添加的属性
—如果没有限定，则实例属性存储在__dict__中