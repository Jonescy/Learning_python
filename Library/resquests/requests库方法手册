
1.requests.request(method,url,**kwargs)
构造一个请求，支撑一下各方法的基础方法
method：请求方式，对应get/put/post等7种
url：拟获取页面的url链接
**kwargs：控制访问的参数，共13个
    params：字典或字节序列，作为参数增加到url中
    data：字典、字节序列或文件对象，作为Request的内容
    json：JSON格式的数据，作为Request的内容
    headers：字典，HTTP定制头
    cookies：字典或CookieJar，Request中的cookie
    auth：元组，直锤HTTP认证功能
    files：字典类型，传输文件
    timeout：设定超时时间，秒为单位
    proxies：字典类型，设定访问代理服务器，可以增加登录认证（防止服务器逆追踪）
    allow_redirects:True/False，默认为True，重定向开关
    stream：True/False,默认为True，获取内容立即下载开关
    verify：True/False,默认为True，获取SSL证书开关
    cert：本地SSL证书路径


2.requests.get(url,params=None, **kwargs)
url: 拟获取页面的url链接
params： url中的额外参数，字典或字节流格式，可选
**kwargs：12个控制访问的参数

    Response 对象的属性
    属性                  说明
    r.status_code       HTTP请求的返回状态，200表示连接成功，404表示失败
    r.text              HTTP响应内容的字符串形式，即，url对应的页面内容
    r.encoding          从HTTP header 中猜测的响应内容编码方式
    r.apparent_encoding 从内容中分析出的响应编码方式（备选编码方式）
    r.content           HTTP响应内容的二进制形式

    Requests库的异常
    异常                              说明
    requests.ConnectionError         网络链接错误异常，如DNS查询失败、拒绝链接等
    requests.HTTPError               HTTP错误异常
    requests.URLRequired             URL缺失异常
    requests.TooMangRedirects        超过最大重定向次数，产生重定向异常
    requests.ConnectTimeout          链接远程服务器时异常
    requests.Timeout                 请求URL超市，产生超时异常


3.requests.head(url,**kwargs)
获取HTML网页头信息的方法，对应于HTTP的HEAD

4.requests.post(url,data=None,json=None，**kwargs)
向HTML网页提交POST请求的方法，对应HTTP的POST
data：字典、字节序列或文件，Request的内容
json：JSON格式的数据，Request 的内容

5.requests.put(url,data=None，**kwargs)
向HTML网页提交PUT请求的方法，对应HTTP的PUT

6.requests.patch(url,data=None，**kwargs)
向HTML网页提交局部修改请求，对应于HTTP的PATCH

7.requests.delete(url,**kwargs)
向HTML页面提交删除请求，对应于HTTP的DELETE

response:
获取二进制文件
requests.get(url).content

获取cookie
requests.get(url).cookies

会话维持
s = requests.Session()
s.get(url)
response = s.get(url2)

证书验证
import requests.packages import urllib3
urllib3.disable_warnings()
response = requests.get(url,verify=False)

代理设置
proxies = {
    "http":"http://127.0.0.1:9743",
    "https":"https://127.0.0.1:9743"
}

response = requests.get(url,proxies=proxies)

超时设置
from requests.exceptions import ReadTimeout
try:
    response = requests.get(url,timeout=0.5)
    print(response.status_code)
except ReadTimeout:
    print('timeout')

认证设置
from requests.auth import HTTPBasicAuth
response = requests.get(url,auth=HTTPBasicAuth('user',"123"))
print(r.status_code)\

异常处理