re（regular expression）：正则表达式是用来简洁表达一组字符串的表达式
正则表达式由字符+操作符构成
常用操作符：
. :表示任何单个字符，除了换行符

[]:字符集，对单个字符给出取值范围
[abc]表示a、b、c，[a-z]表示a到z单个字符

[^]:非字符集，对单个字符给出排除范围
[^abc]表示非a或b或c单个字符

*:前一个字符0次或无限次扩展
abc*表示ab、abc、abcc、abccc等

+：前一个字符至少1次或无限次扩展
abc+表示abc、abcc、abccc等

?:前一个字符0次或1次扩展
abc？表示ab、abc

|：左右表达式任意一
abc|def表示abc、def

{m}：扩展前一个字符m次
ab{2}c表示abbc

{m,n}：扩展前一个字符m至n次（含n）
ab{1,2}c表示abc、abbc

^：匹配字符串开头
^abc表示abc且在一个字符串的开头

$：匹配字符串结尾
abc$表示abc且在一个字符串的结尾

()：分组标记，内部只能使用|操作符
(abc)表示abc，(abc|def)表示abc、def

\d 数字，等价于[0-9]

\w 单词字符，等价于[A-Z,a-z,0-9_]

实例：
[\u4e00-\u9fa5]  匹配中文字符
^[A-Za-z]+$      由26个字母组成的字符串
^[A-Za-z0-9]+$   由26个字母和数字组成的字符串
^-?\d+$          整数形式的字符串
^[0-9]*[1-9][0-9]*$  正整数形式的字符串
[1-9]\d{5}          中国境内邮政编码
\d{3}-\d{8}|\d{4}-\d{7}   国内电话号码，020-12893812
匹配IP地址表达式：(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5]).){3}([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5])


正则表达式的表示类型：
re库采用raw string（原生字符串）类型表示正则表达式，表示为：r'text'
例如：r'[1-9]\d{5}'
     r'\d{3}-\d{8}|\d{4}-\d{7}'
     raw string 是不包含转义符的字符串

string类型，更加繁琐
例如：'[1-9]\\d{5}'
     '\\d{3}-\\d{8}|\\d{4}-\\d{7}'


re库主要功能函数
re.search(pattern,string,flags=0)：
# 在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象
    pattern:正则表达式的字符串或原生字符串表示
    string：待匹配字符串
    flags：正则表达式使用时的控制标记
        re.I:re.IGNORECASE 忽略正则表达式的大小写，[A-Z]能够匹配小写字符
        re.M:re.MULTILINE 正则表达式中的^操作符能够将给定字符串的每行当作匹配开始
        re.S:re.DOTALL 正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符
        有换行符就用re.S模式
re.match(pattern,string,flags=0))：
# 从一个字符串的开始位置起匹配正则表达式，返回match对象
Match 对象的方法
.group(0):获取匹配后的字符串
.start():匹配字符串在原始字符串的开始位置
.end()：匹配字符串在元素字符串的结束位置
.span():返回匹配结果的范围

re.findall(pattern,string,flags=0)):
# 搜索字符串，以列表形式返回全部能匹配的子串

re.split(pattern,string,maxsplit=0,flags=0)):
# 将一个字符串按照正则表达式匹配结果进行分割，返回列表类型
maxsplit:最大分割数，剩余部分作为最后一个元素输出

re.finditer(pattern,string,flags=0))：
# 搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象

re.sub(pattern,repl,string,flags=0))：
# 在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串
repl:替换匹配字符串的字符串
count：最大匹配替换次数



pattern = re.compile(pattern, flags=0)
# 将正则表达式的字符串形式编译成正则表达式对象


