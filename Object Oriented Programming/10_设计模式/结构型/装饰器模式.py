"""
装饰器模式：指在不必改变原类文件和继承的情况下，动态扩展一个对象的功能，它使通过包装对象，也就是装饰器包裹真实的对象。
特点
（1） 装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。
（2） 装饰对象包含一个真实对象的引用（reference）
（3） 装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。
（4） 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。

设计原则
1. 多组合，少继承。
利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。然而，如果能够利用组合的做法扩展对象的行为，就可以在运行时动态地进行扩展。
2. 类应设计的对扩展开放，对修改关闭。
"""


class Test:
    def add(self):
        print('新增数据')

    def remove(self):
        print('删除数据')


class Decorator:
    def __init__(self, name):
        self.__run = name

    def save(self):
        print('保存数据')

    def __getattr__(self, item):
        return getattr(self.__run, item)


if __name__ == '__main__':
    t1 = Test()
    d = Decorator(t1)
    d.remove()
    d.add()
    d.save()
